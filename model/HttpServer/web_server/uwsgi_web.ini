##############################################
# uWSGI 配置文件
##############################################

[uwsgi]

# 指定IP端口  // 直接外部访问
# socket协议，用于和nginx通讯,端口可配置成别的端口；如果有nginx在uwsgi之前作为代理的话应该配socket   如：socket=0.0.0.0:5000，
# 而如果客户端请求不经过(不搭建)Nginx代理服务器,服务请求直接到uwsgi服务器的话那么就配http。如：http=0.0.0.0:5000;
# IP和端口与项目启动文件app.py中一致; 127.0.0.1虽然是表示本地IP，但想要在网络上访问必须设置host=0.0.0.0才不受IP限制
http = 0.0.0.0:8999

#项目目录，定位到项目的第一层，具体配置根据实际目录情况而定，如项目名称为falsk
chdir = /deploy/PythonProjects

#虚拟环境
# virtualenv =/usr/bin/python

#指定项目的application
# 项目启动文件,实际也可能不是这个命名(需要带上文件路径，视具体目录情况而定)
wsgi-file=/deploy/PythonProjects/model/HttpServer/web_server/web_server.py
# 程序内的application变量名，也即执行run方法的那个实例的名称
callable=server
# module = web.wsgi:application

#uwsgi启动用户名和用户组
#uid = flask_server
#gid = flask_server

# 启用主进程，来管理其他进程，其它的uwsgi进程都是这个master进程的子进程，如果kill这个master进程，相当于重启所有的uwsgi进程。
master = true

# 指定Socket路径  //内部访问  #权限和nginx一样
socket = uwsgi_web.sock

# socket权限设置
chmod-socket = 755

#进程个数
processes = 2
# 进程号存储文件，若不存在则会自动创建，pid里面只记录一个进程号，若存在多个进程processes，则使用uwsgi命令通过uwsgi.pid文件停止、重启uwsgi服务不全
pidfile = uwsgi_web.pid

# 当服务器退出的时候自动清理环境, 自动移除unix Socket 和 Pid 文件
vacuum = true

#序列化接受的内容，如果可能的话
thunder-lock = true

#启用线程
enable-threads = false

#配置每个进程的线程数
#threads=4

#设置自动中断时间
harakiri = 30

#设置缓冲
post-buffering = 524288

#设置用于uwsgi包解析的内部缓存区大小为512k。默认是4k
buffer-size = 5242880 

#设置静态文件
#static-map = /static=//www/wwwroot/mysite/static

#设置日志目录
daemonize = uwsgi_web.log

#为每个工作进程设置请求数的上限。当一个工作进程处理的请求数达到这个值，那么该工作进程就会被回收重用（重启）。
max-requests = 5000 

lazy=true
